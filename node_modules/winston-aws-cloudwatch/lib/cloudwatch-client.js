'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _debug2 = require('debug');

var _debug3 = _interopRequireDefault(_debug2);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _defaults = require('defaults');

var _defaults2 = _interopRequireDefault(_defaults);

var _lodash = require('lodash.find');

var _lodash2 = _interopRequireDefault(_lodash);

var _cloudwatchEventFormatter = require('./cloudwatch-event-formatter');

var _cloudwatchEventFormatter2 = _interopRequireDefault(_cloudwatchEventFormatter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug3.default)('winston-aws-cloudwatch:CloudWatchClient');

var CloudWatchClient = function () {
  function CloudWatchClient(logGroupName, logStreamName, options) {
    (0, _classCallCheck3.default)(this, CloudWatchClient);

    debug('constructor', { logGroupName, logStreamName, options });
    this._logGroupName = logGroupName;
    this._logStreamName = logStreamName;
    this._options = (0, _defaults2.default)(options, {
      awsConfig: null,
      maxSequenceTokenAge: -1,
      formatLog: null,
      formatLogItem: null,
      createLogGroup: false,
      createLogStream: false
    });
    this._formatter = new _cloudwatchEventFormatter2.default(this._options);
    this._sequenceTokenInfo = null;
    this._client = new _awsSdk2.default.CloudWatchLogs(this._options.awsConfig);
    this._initializing = null;
  }

  (0, _createClass3.default)(CloudWatchClient, [{
    key: 'submit',
    value: function submit(batch) {
      var _this = this;

      debug('submit', { batch });
      return this._initialize().then(function () {
        return _this._getSequenceToken();
      }).then(function (sequenceToken) {
        return _this._putLogEvents(batch, sequenceToken);
      }).then(function (_ref) {
        var nextSequenceToken = _ref.nextSequenceToken;
        return _this._storeSequenceToken(nextSequenceToken);
      });
    }
  }, {
    key: '_initialize',
    value: function _initialize() {
      var _this2 = this;

      if (this._initializing == null) {
        this._initializing = this._maybeCreateLogGroup().then(function () {
          return _this2._maybeCreateLogStream();
        });
      }
      return this._initializing;
    }
  }, {
    key: '_maybeCreateLogGroup',
    value: function _maybeCreateLogGroup() {
      var _this3 = this;

      if (!this._options.createLogGroup) {
        return _promise2.default.resolve();
      }
      var params = {
        logGroupName: this._logGroupName
      };
      return this._client.createLogGroup(params).promise().catch(function (err) {
        return _this3._allowResourceAlreadyExistsException(err);
      });
    }
  }, {
    key: '_maybeCreateLogStream',
    value: function _maybeCreateLogStream() {
      var _this4 = this;

      if (!this._options.createLogStream) {
        return _promise2.default.resolve();
      }
      var params = {
        logGroupName: this._logGroupName,
        logStreamName: this._logStreamName
      };
      return this._client.createLogStream(params).promise().catch(function (err) {
        return _this4._allowResourceAlreadyExistsException(err);
      });
    }
  }, {
    key: '_allowResourceAlreadyExistsException',
    value: function _allowResourceAlreadyExistsException(err) {
      if (err.code !== 'ResourceAlreadyExistsException') {
        throw err;
      }
    }
  }, {
    key: '_putLogEvents',
    value: function _putLogEvents(batch, sequenceToken) {
      var _this5 = this;

      debug('putLogEvents', { batch, sequenceToken });
      var params = {
        logGroupName: this._logGroupName,
        logStreamName: this._logStreamName,
        logEvents: batch.map(function (item) {
          return _this5._formatter.formatLogItem(item);
        }),
        sequenceToken
      };
      return this._client.putLogEvents(params).promise();
    }
  }, {
    key: '_getSequenceToken',
    value: function _getSequenceToken() {
      var now = +new Date();
      var isStale = !this._sequenceTokenInfo || this._sequenceTokenInfo.date + this._options.maxSequenceTokenAge < now;
      return isStale ? this._fetchAndStoreSequenceToken() : _promise2.default.resolve(this._sequenceTokenInfo.sequenceToken);
    }
  }, {
    key: '_fetchAndStoreSequenceToken',
    value: function _fetchAndStoreSequenceToken() {
      var _this6 = this;

      debug('fetchSequenceToken');
      return this._findLogStream().then(function (_ref2) {
        var uploadSequenceToken = _ref2.uploadSequenceToken;
        return _this6._storeSequenceToken(uploadSequenceToken);
      });
    }
  }, {
    key: '_storeSequenceToken',
    value: function _storeSequenceToken(sequenceToken) {
      debug('storeSequenceToken', { sequenceToken });
      var date = +new Date();
      this._sequenceTokenInfo = { sequenceToken, date };
      return sequenceToken;
    }
  }, {
    key: '_findLogStream',
    value: function _findLogStream(nextToken) {
      var _this7 = this;

      debug('findLogStream', { nextToken });
      var params = {
        logGroupName: this._logGroupName,
        logStreamNamePrefix: this._logStreamName,
        nextToken
      };
      return this._client.describeLogStreams(params).promise().then(function (_ref3) {
        var logStreams = _ref3.logStreams,
            nextToken = _ref3.nextToken;

        var match = (0, _lodash2.default)(logStreams, function (_ref4) {
          var logStreamName = _ref4.logStreamName;
          return logStreamName === _this7._logStreamName;
        });
        if (match) {
          return match;
        }
        if (nextToken == null) {
          throw new Error('Log stream not found');
        }
        return _this7._findLogStream(nextToken);
      });
    }
  }]);
  return CloudWatchClient;
}();

exports.default = CloudWatchClient;